type GenerationNum = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
interface Dimensions {
    w: number;
    h: number;
}
interface PokemonData {
    id: string;
    spriteid: string;
    gen: number;
    num: number;
    icon?: number;
    iconf?: number;
    iconl?: number;
    dex?: boolean;
    nonshiny?: boolean;
    missing?: string[];
    front?: Dimensions;
    frontf?: Dimensions;
    back?: Dimensions;
    backf?: Dimensions;
    bw?: {
        front?: Dimensions;
        frontf?: Dimensions;
        back?: Dimensions;
        backf?: Dimensions;
    };
}
interface Data {
    getPokemon(name: string): PokemonData | undefined;
    getItem(name: string): {
        spritenum?: number;
    } | undefined;
    getAvatar(name: string): string | undefined;
}

type GenderName = 'M' | 'F' | 'N';
type SideID = 'p1' | 'p2';
type Protocol = 'https' | 'http';
declare const GENS: {
    readonly gen1rg: 1;
    readonly gen1rb: 1;
    readonly gen1: 1;
    readonly gen2g: 2;
    readonly gen2s: 2;
    readonly gen2: 2;
    readonly gen3rs: 3;
    readonly gen3frlg: 3;
    readonly gen3: 3;
    readonly 'gen3-2': 3;
    readonly gen4dp: 4;
    readonly 'gen4dp-2': 4;
    readonly gen4: 4;
    readonly gen5: 5;
    readonly gen5ani: 5;
    readonly ani: 6;
};
type GraphicsGen = keyof typeof GENS;
declare const ANIMATED: {
    gen5ani: "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
    ani: "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
};
type AnimatedGraphicsGen = keyof typeof ANIMATED;
declare const FRAME2: {
    'gen3-2': "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
    'gen4dp-2': "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
};
type SecondFrameGraphicsGen = keyof typeof FRAME2;
interface PokemonSprite {
    gen: GenerationNum;
    w: number;
    h: number;
    url: string;
    pixelated?: boolean;
}
declare class Sprites {
    SOURCES: {
        [name: string]: "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
    };
    GENS: {
        readonly gen1rg: 1;
        readonly gen1rb: 1;
        readonly gen1: 1;
        readonly gen2g: 2;
        readonly gen2s: 2;
        readonly gen2: 2;
        readonly gen3rs: 3;
        readonly gen3frlg: 3;
        readonly gen3: 3;
        readonly 'gen3-2': 3;
        readonly gen4dp: 4;
        readonly 'gen4dp-2': 4;
        readonly gen4: 4;
        readonly gen5: 5;
        readonly gen5ani: 5;
        readonly ani: 6;
    };
    ANIMATED: {
        gen5ani: "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
        ani: "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
    };
    FRAME2: {
        'gen3-2': "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
        'gen4dp-2': "gen5" | "gen1rg" | "gen1rb" | "gen1" | "gen2g" | "gen2s" | "gen2" | "gen3rs" | "gen3frlg" | "gen3" | "gen3-2" | "gen4dp" | "gen4dp-2" | "gen4" | "gen5ani" | "ani";
    };
    readonly data: Data;
    constructor(data: Data);
    /**
     * Returns information suitable for rendering a named Pokémon sprite based on the options.
     *
     * @param name - name of the Pokémon to retrieve a sprite for
     * @param options - options controlling which sprite is chosen:
     *
     *   - `gen`: the preferred graphics or generation to use, defaults to `'ani'`
     *   - `side`: which side the Pokémon is on. Defaults to `'p2'` which is a front sprite, `'p1'`
     *             will select a back sprite
     *   - `gender`: the gender of the Pokémon, `undefined` by default, only relevant if it set to
     *               `'F'` in Gen 4 or later
     *   - `shiny`: whether or not the Pokémon sprite should be shiny, defaults to `false`
     *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed
     *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`
     *
     * @return {PokemonSprite}
     */
    getPokemon(name: string, options?: {
        gen?: GraphicsGen | GenerationNum;
        side?: SideID;
        gender?: GenderName;
        shiny?: boolean;
        protocol?: Protocol;
        domain?: string;
    }): {
        gen: number;
        w: number;
        h: number;
        url: string;
        pixelated: boolean;
    };
    /**
     * Returns information suitable for rendering a Pokémon 'dex' sprite based on the options. Unlike
     * `getPokemon`, the Pokémon returned by `getDexPokemon` is based on what a player would see when
     * they inspect a Pokémon in the Pokédex application in their game (ie. static genderless front
     * sprites).
     *
     * @param name - name of the Pokémon to retrieve a dex sprite for
     * @param options - options controlling which dex sprite is chosen:
     *
     *   - `gen`: the preferred graphics or generation to use, defaults to `'dex'`, must be static
     *   - `shiny`: whether or not the Pokémon sprite should be shiny, defaults to `false`
     *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed
     *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`
     *
     * @return {PokemonSprite}
     */
    getDexPokemon(name: string, options?: {
        gen?: GraphicsGen | 'dex' | GenerationNum;
        shiny?: boolean;
        protocol?: Protocol;
        domain?: string;
    }): {
        gen: number;
        w: number;
        h: number;
        url: string;
        pixelated: boolean;
    };
    /**
     * Returns the information required for rendering a sprite for a 'Substitute'.
     *
     * @param options - options controlling which Substitute sprite is chosen:
     *
     *   - `gen`: the preferred graphics or generation to use, defaults to `9`
     *   - `side`: which side the Substitute is on. Defaults to `'p2'` which is a front sprite, `'p1'`
     *             will select a back sprite
     *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed
     *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`
     *
     * @return {PokemonSprite}
     */
    getSubstitute(options?: {
        gen?: GraphicsGen | GenerationNum;
        side?: SideID;
        protocol?: Protocol;
        domain?: string;
    }): {
        gen: GenerationNum;
        w: number;
        h: number;
        iw: number;
        ih: number;
        url: string;
        pixelated: boolean;
    };
    /**
     * Returns the URL for a particular trainer avatar.
     *
     * @param avatar - the number or string identifier for the trainer avatar
     * @param options - options controlling the URL returned:
     *
     *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed
     *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`
     *
     * @return {string}
     */
    getAvatar(avatar: number | string, options?: {
        protocol?: Protocol;
        domain?: string;
    }): string;
}
declare class Icons {
    readonly data: Data;
    constructor(data: Data);
    /**
     * Returns information suitable for rendering a named Pokémon icon based on the options.
     *
     * @param name - name of the Pokémon to retrieve icon information for
     * @param options - options controlling which icon is chosen:
     *
     *   - `side`: which side the Pokémon is on. Defaults to `'p2'` which is a right-facing icon,
     *            'p1'` will select a left-facing icon if one exists
     *   - `gender`: the gender of the Pokémon, `undefined` by default, only relevant if it set to
     *               `'F'` in Gen 4 or later and a female icon for the Pokémon exists
     *   - `fainted`: whether or not the Pokémon has fainted
     *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed
     *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`
     */
    getPokemon(name: string, options?: {
        side?: SideID;
        gender?: GenderName;
        fainted?: boolean;
        protocol?: Protocol;
        domain?: string;
    }): {
        style: string;
        url: string;
        left: number;
        top: number;
        css: {
            [attr: string]: string;
        };
    };
    /**
     * Returns information required to display an icon for a particular type of Pokeball.
     *
     * @param name - the name of the Pokeball to retrieve icon information for
     * @param options - options controlling the URL returned:
     *
     *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed
     *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`
     */
    getPokeball(name: string, options?: {
        protocol?: Protocol;
        domain?: string;
    }): {
        style: string;
        url: string;
        left: number;
        top: number;
        css: {
            [attr: string]: string;
        };
    } | undefined;
    /**
     * Returns information required to display an icon for a particular Item.
     *
     * @param name - the name of the Item to retrieve icon information for
     * @param options - options controlling the URL returned:
     *
     *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed
     *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`
     */
    getItem(name: string, options?: {
        protocol?: Protocol;
        domain?: string;
    }): {
        style: string;
        url: string;
        top: number;
        left: number;
        css: {
            [attr: string]: string | number;
        };
    };
    /**
     * Returns information required to display an icon for a particular Type.
     *
     * @param name - the name of the Type to retrieve icon information for
     * @param options - options controlling the URL returned:
     *
     *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed
     *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`
     */
    getType(name: string, options?: {
        protocol?: Protocol;
        domain?: string;
    }): {
        url: string;
        type: string;
        w: number;
        h: number;
    };
}

export { AnimatedGraphicsGen, GraphicsGen, Icons, PokemonSprite, SecondFrameGraphicsGen, Sprites };
