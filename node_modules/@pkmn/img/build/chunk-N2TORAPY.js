"use strict";Object.defineProperty(exports, "__esModule", {value: true});var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/adaptable.ts
var PROTOCOL = "https";
var DOMAIN = "play.pokemonshowdown.com";
var URL = (options) => {
  var _a, _b;
  const url = `${(_a = options == null ? void 0 : options.protocol) != null ? _a : PROTOCOL}://${(_b = options == null ? void 0 : options.domain) != null ? _b : DOMAIN}`;
  return url.endsWith("/") ? url.slice(0, -1) : url;
};
var GENS = {
  "gen1rg": 1,
  "gen1rb": 1,
  "gen1": 1,
  "gen2g": 2,
  "gen2s": 2,
  "gen2": 2,
  "gen3rs": 3,
  "gen3frlg": 3,
  "gen3": 3,
  "gen3-2": 3,
  "gen4dp": 4,
  "gen4dp-2": 4,
  "gen4": 4,
  "gen5": 5,
  "gen5ani": 5,
  "ani": 6
};
var ANIMATED = {
  "gen5ani": "gen5",
  "ani": "dex"
};
var FRAME2 = {
  "gen3-2": "gen3",
  "gen4dp-2": "gen4dp"
};
var SOURCES = {
  "Green": "gen1rg",
  "Red/Blue": "gen1rb",
  "Yellow": "gen1",
  "Gold": "gen2g",
  "Silver": "gen2s",
  "Crystal": "gen2",
  "Ruby/Sapphire": "gen3rs",
  "FireRed/LeafGreen": "gen3frlg",
  "Emerald": "gen3",
  "Emerald (2)": "gen3-2",
  "Diamond/Pearl": "gen4dp",
  "Diamond/Pearl (2)": "gen4dp-2",
  "Platinum": "gen4",
  "Black/White": "gen5",
  "Black/White (Animated)": "gen5ani",
  "Modern (Animated)": "ani"
};
var NONDP = /* @__PURE__ */ new Set([
  "giratinaorigin",
  "rotomfan",
  "rotomfrost",
  "rotomheat",
  "rotommow",
  "rotomwash",
  "shayminsky"
]);
var Sprites = class {
  constructor(data) {
    this.SOURCES = SOURCES;
    this.GENS = GENS;
    this.ANIMATED = ANIMATED;
    this.FRAME2 = FRAME2;
    this.data = data;
  }
  getPokemon(name, options) {
    var _a, _b, _c, _d;
    const url = `${URL(options)}/sprites`;
    const data = this.data.getPokemon(name);
    if (!data) {
      return { gen: 5, w: 96, h: 96, url: `${url}/gen5/0.png`, pixelated: true };
    }
    const max = typeof (options == null ? void 0 : options.gen) === "string" ? this.GENS[options.gen] : (options == null ? void 0 : options.gen) || 9;
    const min = Math.min(data.gen, 5);
    let gen = Math.max(max, min);
    let graphics;
    if (!(options == null ? void 0 : options.gen) || typeof options.gen === "number" || gen !== this.GENS[options.gen]) {
      graphics = gen <= 5 ? `gen${gen}` : "ani";
    } else {
      graphics = options.gen;
    }
    let dir = graphics;
    let facing = "front";
    if ((options == null ? void 0 : options.side) === "p1") {
      dir += "-back";
      facing = "back";
    }
    if ((options == null ? void 0 : options.shiny) && gen > 1 && !data.nonshiny)
      dir += "-shiny";
    const rewrite = (d, a, b) => [this.GENS[b], b, `${b}${d.slice(a.length)}`];
    if (data.spriteid === "missingno" && gen > 1) {
      [gen, graphics, dir] = rewrite(dir, graphics, "gen1");
    } else if (dir.startsWith("gen4dp") && NONDP.has(data.id)) {
      [gen, graphics, dir] = rewrite(dir, graphics, "gen4");
    } else if (facing === "back" && graphics in this.FRAME2) {
      const frame1 = this.FRAME2[graphics];
      [gen, graphics, dir] = rewrite(dir, graphics, frame1);
      dir = `${frame1}${dir.slice(graphics.length)}`;
    } else if (dir.startsWith("gen1rg-back") || dir.startsWith("gen1rb-back")) {
      [gen, graphics, dir] = rewrite(dir, graphics, "gen1");
    } else if (dir.startsWith("gen2g-back") || dir.startsWith("gen2s-back")) {
      [gen, graphics, dir] = rewrite(dir, graphics, "gen2");
    } else if (dir.startsWith("gen3rs-back") || dir.startsWith("gen3frlg-back")) {
      [gen, graphics, dir] = rewrite(dir, graphics, "gen3");
    } else if (dir.startsWith("gen4dp-back")) {
      [gen, graphics, dir] = rewrite(dir, graphics, "gen4");
    } else if (dir.startsWith("gen3frlg")) {
      if (!(data.gen === 1 && data.num <= 151 || data.id === "teddiursa" || data.id.startsWith("deoxys"))) {
        [gen, graphics, dir] = rewrite(dir, graphics, "gen3");
      }
    } else if (dir === "ani-back-shiny") {
      if (["unown-f", "unown-p"].includes(data.spriteid) || (options == null ? void 0 : options.gender) === "F" && ["snover", "buizel"].includes(data.spriteid)) {
        [gen, graphics, dir] = rewrite(dir, graphics, "gen5");
      }
    }
    const facingf = facing + "f";
    if (graphics in this.ANIMATED) {
      const d = graphics === "gen5ani" ? (_a = data.bw) != null ? _a : {} : data;
      if (d[facingf] && (options == null ? void 0 : options.gender) === "F")
        facing = `${facing}f`;
      if (d[facing] && !((_b = data.missing) == null ? void 0 : _b.includes(dir))) {
        const w = (_c = d[facing].w) != null ? _c : 96;
        const h = (_d = d[facing].h) != null ? _d : 96;
        const file2 = facing.endsWith("f") ? `${data.spriteid}-f` : data.spriteid;
        return { gen, w, h, url: `${url}/${dir}/${file2}.gif`, pixelated: gen <= 5 };
      }
      [gen, graphics, dir] = rewrite(dir, graphics, "gen5");
    } else if (data[facingf] && (options == null ? void 0 : options.gender) === "F") {
      facing = `${facing}f`;
    }
    const file = data.gen >= 4 && data[facing] && facing.endsWith("f") ? `${data.spriteid}-f` : data.spriteid;
    return { gen, w: 96, h: 96, url: `${url}/${dir}/${file}.png`, pixelated: true };
  }
  getDexPokemon(name, options) {
    var _a;
    let graphics = (_a = options == null ? void 0 : options.gen) != null ? _a : "dex";
    if (graphics in this.ANIMATED)
      graphics = this.ANIMATED[graphics];
    const data = this.data.getPokemon(name);
    if (!(data == null ? void 0 : data.dex) || graphics !== "dex" && !(typeof graphics === "number" && graphics >= 6)) {
      options = { ...options };
      if (!options.gen || options.gen === "dex")
        options.gen = "gen5";
      return this.getPokemon(name, options);
    }
    const gen = Math.max(data.gen, 6);
    const shiny = (options == null ? void 0 : options.shiny) ? "-shiny" : "";
    const size = data.gen >= 7 ? 128 : 120;
    const url = `${URL(options)}/sprites/dex${shiny}/${data.spriteid}.png`;
    return { gen, w: size, h: size, url, pixelated: false };
  }
  getSubstitute(options) {
    const url = `${URL(options)}/sprites/substitutes`;
    let dir;
    const iw = 0;
    const ih = 0;
    let gen = (options == null ? void 0 : options.gen) || 9;
    if (typeof gen === "string")
      gen = GENS[gen];
    if (gen < 3) {
      dir = "gen1";
    } else if (gen < 4) {
      dir = "gen3";
    } else if (gen < 5) {
      dir = "gen4";
    } else {
      gen = 5;
      dir = "gen5";
    }
    if ((options == null ? void 0 : options.side) === "p1")
      dir += "-back";
    return { gen, w: 96, h: 96, iw, ih, url: `${url}/${dir}/substitute.png`, pixelated: true };
  }
  getAvatar(avatar, options) {
    var _a;
    avatar = `${avatar}`;
    avatar = (_a = this.data.getAvatar(avatar)) != null ? _a : avatar;
    const url = `${URL(options)}/sprites/trainers`;
    return avatar.charAt(0) === "#" ? `${url}-custom/${avatar.substring(1)}.png` : `${url}/${sanitizeName(avatar || "unknown")}.png`;
  }
};
var Icons = class {
  constructor(data) {
    this.data = data;
  }
  getPokemon(name, options) {
    var _a, _b, _c;
    const data = this.data.getPokemon(name);
    let num = (_a = data == null ? void 0 : data.num) != null ? _a : 0;
    if (num < 0 || num > 1010)
      num = 0;
    if (data == null ? void 0 : data.icon)
      num = data.icon;
    if ((options == null ? void 0 : options.gender) === "F")
      num = (_b = data == null ? void 0 : data.iconf) != null ? _b : num;
    if ((options == null ? void 0 : options.side) !== "p2")
      num = (_c = data == null ? void 0 : data.iconl) != null ? _c : num;
    const top = -Math.floor(num / 12) * 30;
    const left = -(num % 12) * 40;
    const url = `${URL(options)}/sprites/pokemonicons-sheet.png`;
    const css = {
      display: "inline-block",
      width: "40px",
      height: "30px",
      imageRendering: "pixelated",
      background: `transparent url(${url}) no-repeat scroll ${left}px ${top}px`
    };
    if (options == null ? void 0 : options.fainted) {
      css.opacity = "0.3";
      css.filter = "grayscale(100%) brightness(.5)";
    }
    return { style: toStyle(css), url, left, top, css };
  }
  getPokeball(name, options) {
    let left = 0;
    let top = 0;
    const css = {
      display: "inline-block",
      width: "40px",
      height: "30px",
      imageRendering: "pixelated"
    };
    if (name === "pokeball") {
      left = 0;
      top = 4;
    } else if (name === "pokeball-statused") {
      left = -40;
      top = 4;
    } else if (name === "pokeball-fainted") {
      left = 80;
      top = 4;
      css.opacity = "0.4";
      css.filter = "contrast(0)";
    } else if (name === "pokeball-none") {
      left = -80;
      top = 4;
    } else {
      return void 0;
    }
    const url = `${URL(options)}/sprites/pokemonicons-pokeball-sheet.png`;
    css.background = `transparent url(${url}) no-repeat scroll ${left}px ${top}px`;
    return { style: toStyle(css), url, left, top, css };
  }
  getItem(name, options) {
    var _a, _b;
    const num = (_b = (_a = this.data.getItem(name)) == null ? void 0 : _a.spritenum) != null ? _b : 0;
    const top = -Math.floor(num / 16) * 24;
    const left = -(num % 16) * 24;
    const url = `${URL(options)}/sprites/itemicons-sheet.png`;
    const css = {
      display: "inline-block",
      width: "24px",
      height: "24px",
      imageRendering: "pixelated",
      background: `transparent url(${url}) no-repeat scroll ${left}px ${top}px`
    };
    return { style: toStyle(css), url, top, left, css };
  }
  getType(name, options) {
    const type = name === "???" ? "%3f%3f%3f" : `${name.charAt(0).toUpperCase()}${name.substr(1).toLowerCase()}`;
    const url = `${URL(options)}/sprites/types/${type}.png`;
    return { url, type, w: 32, h: 14 };
  }
};
function sanitizeName(name) {
  if (!name)
    return "";
  return ("" + name).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").slice(0, 50);
}
function toStyle(css) {
  const style = [];
  for (const attr in css) {
    style.push(`${attr === "imageRendering" ? "image-rendering" : attr}:${css[attr]}`);
  }
  return `${style.join(";")};`;
}





exports.__export = __export; exports.Sprites = Sprites; exports.Icons = Icons;
//# sourceMappingURL=chunk-N2TORAPY.js.map