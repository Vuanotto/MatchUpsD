{
  "version": 3,
  "sources": ["../../@pkmn/img/src/adaptable.ts", "../../@pkmn/img/src/data/index.ts", "../../@pkmn/img/src/index.ts"],
  "sourcesContent": ["import {Data, GenerationNum} from './data/interface';\n\ntype GenderName = 'M' | 'F' | 'N';\ntype SideID = 'p1' | 'p2';\ntype Protocol = 'https' | 'http';\ntype Facing = 'front' | 'frontf' | 'back' | 'backf';\n\nconst PROTOCOL = 'https';\nconst DOMAIN = 'play.pokemonshowdown.com';\nconst URL = (options?: {protocol?: Protocol; domain?: string}) => {\n  const url = `${options?.protocol ?? PROTOCOL}://${options?.domain ?? DOMAIN}`;\n  return url.endsWith('/') ? url.slice(0, -1) : url;\n};\n\nconst GENS = {\n  'gen1rg': 1,\n  'gen1rb': 1,\n  'gen1': 1,\n  'gen2g': 2,\n  'gen2s': 2,\n  'gen2': 2,\n  // 'gen2ani': 2,\n  'gen3rs': 3,\n  'gen3frlg': 3,\n  'gen3': 3,\n  'gen3-2': 3,\n  // 'gen3ani': 3,\n  'gen4dp': 4,\n  'gen4dp-2': 4,\n  'gen4': 4,\n  // 'gen4-2': 4,\n  // 'gen4hgss': 4,\n  // 'gen4hgss-2': 4,\n  'gen5': 5,\n  'gen5ani': 5,\n  // 'noani': 6,\n  'ani': 6,\n} as const;\n\nexport type GraphicsGen = keyof typeof GENS;\n\nconst ANIMATED = {\n  // 'gen2ani': 2,\n  // 'gen3ani': 3,\n  'gen5ani': 'gen5' as GraphicsGen,\n  'ani': 'dex' as GraphicsGen,\n};\n\nexport type AnimatedGraphicsGen = keyof typeof ANIMATED;\n\nconst FRAME2 = {\n  'gen3-2': 'gen3' as GraphicsGen,\n  'gen4dp-2': 'gen4dp' as GraphicsGen,\n  // 'gen4-2': 'gen4' as GraphicsGen,\n  // 'gen4hgss-2': 'gen4hgss' as GraphicsGen,\n};\n\nexport type SecondFrameGraphicsGen = keyof typeof FRAME2;\n\nconst SOURCES: {[name: string]: GraphicsGen} = {\n  'Green': 'gen1rg',\n  'Red/Blue': 'gen1rb',\n  'Yellow': 'gen1',\n  'Gold': 'gen2g',\n  'Silver': 'gen2s',\n  'Crystal': 'gen2',\n  // 'Crystal (2)': 'gen2-2',\n  'Ruby/Sapphire': 'gen3rs',\n  'FireRed/LeafGreen': 'gen3frlg',\n  'Emerald': 'gen3',\n  'Emerald (2)': 'gen3-2',\n  'Diamond/Pearl': 'gen4dp',\n  'Diamond/Pearl (2)': 'gen4dp-2',\n  'Platinum': 'gen4',\n  // 'Platinum (2)': 'gen4-2':\n  // 'HeartGold/SoulSilver': 'gen4hgss':\n  // 'HeartGold/SoulSilver (2)': 'gen4hgss-2':\n  'Black/White': 'gen5',\n  'Black/White (Animated)': 'gen5ani',\n  // 'Modern': 'noani',\n  'Modern (Animated)': 'ani',\n};\n\nexport interface PokemonSprite {\n  gen: GenerationNum;\n  w: number;\n  h: number;\n  url: string;\n  pixelated?: boolean;\n}\n\n// Several Pokemon were added in the middle of Gen 4 and thus are not present in gen4dp{,-2}\nconst NONDP = new Set([\n  'giratinaorigin', 'rotomfan', 'rotomfrost', 'rotomheat', 'rotommow', 'rotomwash', 'shayminsky',\n]);\n\nexport class Sprites {\n  SOURCES = SOURCES;\n  GENS = GENS;\n  ANIMATED = ANIMATED;\n  FRAME2 = FRAME2;\n\n  readonly data: Data;\n\n  constructor(data: Data) {\n    this.data = data;\n  }\n\n  /**\n   * Returns information suitable for rendering a named Pokémon sprite based on the options.\n   *\n   * @param name - name of the Pokémon to retrieve a sprite for\n   * @param options - options controlling which sprite is chosen:\n   *\n   *   - `gen`: the preferred graphics or generation to use, defaults to `'ani'`\n   *   - `side`: which side the Pokémon is on. Defaults to `'p2'` which is a front sprite, `'p1'`\n   *             will select a back sprite\n   *   - `gender`: the gender of the Pokémon, `undefined` by default, only relevant if it set to\n   *               `'F'` in Gen 4 or later\n   *   - `shiny`: whether or not the Pokémon sprite should be shiny, defaults to `false`\n   *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed\n   *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`\n   *\n   * @return {PokemonSprite}\n   */\n  getPokemon(\n    name: string,\n    options?: {\n      gen?: GraphicsGen | GenerationNum;\n      side?: SideID;\n      gender?: GenderName;\n      shiny?: boolean;\n      protocol?: Protocol;\n      domain?: string;\n    }\n  ) {\n    const url = `${URL(options)}/sprites`;\n    const data = this.data.getPokemon(name);\n    if (!data) {\n      // If we can't figure out the Pokemon in question we just return a question mark icon\n      return {gen: 5, w: 96, h: 96, url: `${url}/gen5/0.png`, pixelated: true};\n    }\n\n    const max = typeof options?.gen === 'string'\n      ? this.GENS[options.gen] as GenerationNum\n      : options?.gen || 9;\n    // Regardless of the generation context, we can only go back to the first generation\n    // the Pokemon existed in (or BW, because the Smogon Sprite Project guarantees BW sprites).\n    const min = Math.min(data.gen, 5) as GenerationNum;\n    let gen = Math.max(max, min) as GenerationNum;\n\n    let graphics: GraphicsGen;\n    if (!options?.gen ||\n      typeof options.gen === 'number' ||\n      gen !== this.GENS[options.gen]) {\n      graphics = (gen <= 5 ? `gen${gen}` : 'ani') as GraphicsGen;\n    } else {\n      graphics = options.gen;\n    }\n\n    let dir: string = graphics;\n    let facing: Facing = 'front';\n    if (options?.side === 'p1') {\n      dir += '-back';\n      facing = 'back';\n    }\n    if (options?.shiny && gen > 1 && !data.nonshiny) dir += '-shiny';\n\n    // Directory rewrites due to missing sprites\n    const rewrite = (d: string, a: GraphicsGen, b: GraphicsGen) =>\n      [this.GENS[b], b, `${b}${d.slice(a.length)}`] as [GenerationNum, GraphicsGen, string];\n\n    if (data.spriteid === 'missingno' && gen > 1) {\n      [gen, graphics, dir] = rewrite(dir, graphics, 'gen1');\n    } else if (dir.startsWith('gen4dp') && NONDP.has(data.id)) {\n      [gen, graphics, dir] = rewrite(dir, graphics, 'gen4');\n    } else if (facing === 'back' && graphics in this.FRAME2) {\n      const frame1 = this.FRAME2[graphics as SecondFrameGraphicsGen];\n      [gen, graphics, dir] = rewrite(dir, graphics, frame1);\n      dir = `${frame1}${dir.slice(graphics.length)}`;\n    } else if (dir.startsWith('gen1rg-back') || dir.startsWith('gen1rb-back')) {\n      [gen, graphics, dir] = rewrite(dir, graphics, 'gen1');\n    } else if (dir.startsWith('gen2g-back') || dir.startsWith('gen2s-back')) {\n      [gen, graphics, dir] = rewrite(dir, graphics, 'gen2');\n    } else if (dir.startsWith('gen3rs-back') || dir.startsWith('gen3frlg-back')) {\n      [gen, graphics, dir] = rewrite(dir, graphics, 'gen3');\n    } else if (dir.startsWith('gen4dp-back')) {\n      [gen, graphics, dir] = rewrite(dir, graphics, 'gen4');\n    } else if (dir.startsWith('gen3frlg')) {\n      // FRLG added new sprites only for Kanto Pokemon, Deoxys and Teddiursa(?!)\n      if (!((data.gen === 1 && data.num <= 151) ||\n             data.id === 'teddiursa' ||\n             data.id.startsWith('deoxys'))) {\n        [gen, graphics, dir] = rewrite(dir, graphics, 'gen3');\n      }\n    } else if (dir === 'ani-back-shiny') {\n      // FIXME: temporary weird missing sprite special cases that are hard to elegantly handle\n      if (['unown-f', 'unown-p'].includes(data.spriteid) ||\n          (options?.gender === 'F' && ['snover', 'buizel'].includes(data.spriteid))) {\n        [gen, graphics, dir] = rewrite(dir, graphics, 'gen5');\n      }\n    }\n\n    const facingf = facing + 'f' as 'frontf' | 'backf';\n    if (graphics in this.ANIMATED) {\n      const d = graphics === 'gen5ani' ? (data.bw ?? {}) : data;\n      if (d[facingf] && options?.gender === 'F') facing = `${facing}f` as Facing;\n\n      if (d[facing] && !data.missing?.includes(dir)) {\n        const w = d[facing]!.w ?? 96;\n        const h = d[facing]!.h ?? 96;\n        const file = facing.endsWith('f') ? `${data.spriteid}-f` : data.spriteid;\n\n        return {gen, w, h, url: `${url}/${dir}/${file}.gif`, pixelated: gen <= 5};\n      }\n\n      [gen, graphics, dir] = rewrite(dir, graphics, 'gen5');\n    } else if ((data[facingf] && options?.gender === 'F')) {\n      facing = `${facing}f` as Facing;\n    }\n\n    // Visual gender differences didn't exist for sprites until Gen 4\n    const file = (data.gen >= 4 && data[facing] && facing.endsWith('f'))\n      ? `${data.spriteid}-f`\n      : data.spriteid;\n\n    return {gen, w: 96, h: 96, url: `${url}/${dir}/${file}.png`, pixelated: true};\n  }\n\n  /**\n   * Returns information suitable for rendering a Pokémon 'dex' sprite based on the options. Unlike\n   * `getPokemon`, the Pokémon returned by `getDexPokemon` is based on what a player would see when\n   * they inspect a Pokémon in the Pokédex application in their game (ie. static genderless front\n   * sprites).\n   *\n   * @param name - name of the Pokémon to retrieve a dex sprite for\n   * @param options - options controlling which dex sprite is chosen:\n   *\n   *   - `gen`: the preferred graphics or generation to use, defaults to `'dex'`, must be static\n   *   - `shiny`: whether or not the Pokémon sprite should be shiny, defaults to `false`\n   *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed\n   *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`\n   *\n   * @return {PokemonSprite}\n   */\n  getDexPokemon(\n    name: string,\n    options?: {\n      gen?: GraphicsGen | 'dex' | GenerationNum;\n      shiny?: boolean;\n      protocol?: Protocol;\n      domain?: string;\n    }\n  ) {\n    let graphics = options?.gen ?? 'dex';\n    if (graphics in this.ANIMATED) graphics = this.ANIMATED[graphics as AnimatedGraphicsGen];\n    const data = this.data.getPokemon(name);\n    if (!data?.dex ||\n      (graphics !== 'dex' && !(typeof graphics === 'number' && graphics >= 6))) {\n      options = {...options};\n      if (!options.gen || options.gen === 'dex') options.gen = 'gen5';\n      return this.getPokemon(name, options as any);\n    }\n\n    const gen = Math.max(data.gen, 6);\n    const shiny = options?.shiny ? '-shiny' : '';\n    const size = data.gen >= 7 ? 128 : 120;\n    const url = `${URL(options)}/sprites/dex${shiny}/${data.spriteid}.png`;\n\n    return {gen, w: size, h: size, url, pixelated: false};\n  }\n\n  /**\n   * Returns the information required for rendering a sprite for a 'Substitute'.\n   *\n   * @param options - options controlling which Substitute sprite is chosen:\n   *\n   *   - `gen`: the preferred graphics or generation to use, defaults to `9`\n   *   - `side`: which side the Substitute is on. Defaults to `'p2'` which is a front sprite, `'p1'`\n   *             will select a back sprite\n   *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed\n   *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`\n   *\n   * @return {PokemonSprite}\n   */\n  getSubstitute(\n    options?: {\n      gen?: GraphicsGen | GenerationNum;\n      side?: SideID;\n      protocol?: Protocol;\n      domain?: string;\n    }\n  ) {\n    const url = `${URL(options)}/sprites/substitutes`;\n    let dir: string;\n    const iw = 0; // TODO innerWidth\n    const ih = 0; // TODO innerHeight\n\n    let gen: GraphicsGen | GenerationNum = options?.gen || 9;\n    if (typeof gen === 'string') gen = GENS[gen] as GenerationNum;\n    if (gen < 3) {\n      dir = 'gen1';\n    } else if (gen < 4) {\n      dir = 'gen3';\n    } else if (gen < 5) {\n      dir = 'gen4';\n    } else {\n      gen = 5;\n      dir = 'gen5';\n    }\n    if (options?.side === 'p1') dir += '-back';\n    return {gen, w: 96, h: 96, iw, ih, url: `${url}/${dir}/substitute.png`, pixelated: true};\n  }\n\n  /**\n   * Returns the URL for a particular trainer avatar.\n   *\n   * @param avatar - the number or string identifier for the trainer avatar\n   * @param options - options controlling the URL returned:\n   *\n   *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed\n   *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`\n   *\n   * @return {string}\n   */\n  getAvatar(avatar: number | string, options?: {protocol?: Protocol; domain?: string}) {\n    avatar = `${avatar}`;\n    avatar = this.data.getAvatar(avatar) ?? avatar;\n    const url = `${URL(options)}/sprites/trainers`;\n    return (avatar.charAt(0) === '#'\n      ? `${url}-custom/${avatar.substring(1)}.png`\n      : `${url}/${sanitizeName(avatar || 'unknown')}.png`);\n  }\n}\n\nexport class Icons {\n  readonly data: Data;\n\n  constructor(data: Data) {\n    this.data = data;\n  }\n\n  /**\n   * Returns information suitable for rendering a named Pokémon icon based on the options.\n   *\n   * @param name - name of the Pokémon to retrieve icon information for\n   * @param options - options controlling which icon is chosen:\n   *\n   *   - `side`: which side the Pokémon is on. Defaults to `'p2'` which is a right-facing icon,\n   *            'p1'` will select a left-facing icon if one exists\n   *   - `gender`: the gender of the Pokémon, `undefined` by default, only relevant if it set to\n   *               `'F'` in Gen 4 or later and a female icon for the Pokémon exists\n   *   - `fainted`: whether or not the Pokémon has fainted\n   *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed\n   *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`\n   */\n  getPokemon(\n    name: string,\n    options?: {\n      side?: SideID;\n      gender?: GenderName;\n      fainted?: boolean;\n      protocol?: Protocol;\n      domain?: string;\n    }\n  ) {\n    const data = this.data.getPokemon(name);\n\n    let num = data?.num ?? 0;\n    if (num < 0 || num > 1010) num = 0;\n    if (data?.icon) num = data.icon;\n    if (options?.gender === 'F') num = data?.iconf ?? num;\n    if (options?.side !== 'p2') num = data?.iconl ?? num;\n\n    const top = -Math.floor(num / 12) * 30;\n    const left = -(num % 12) * 40;\n\n    const url = `${URL(options)}/sprites/pokemonicons-sheet.png`;\n    const css: {[attr: string]: string} = {\n      display: 'inline-block',\n      width: '40px',\n      height: '30px',\n      imageRendering: 'pixelated',\n      background: `transparent url(${url}) no-repeat scroll ${left}px ${top}px`,\n    };\n    if (options?.fainted) {\n      css.opacity = '0.3';\n      css.filter = 'grayscale(100%) brightness(.5)';\n    }\n\n    return {style: toStyle(css), url, left, top, css};\n  }\n\n  /**\n   * Returns information required to display an icon for a particular type of Pokeball.\n   *\n   * @param name - the name of the Pokeball to retrieve icon information for\n   * @param options - options controlling the URL returned:\n   *\n   *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed\n   *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`\n   */\n  getPokeball(name: string, options?: {protocol?: Protocol; domain?: string}) {\n    let left = 0;\n    let top = 0;\n\n    const css: {[attr: string]: string} = {\n      display: 'inline-block',\n      width: '40px',\n      height: '30px',\n      imageRendering: 'pixelated',\n    };\n\n    if (name === 'pokeball') {\n      left = 0;\n      top = 4;\n    } else if (name === 'pokeball-statused') {\n      left = -40;\n      top = 4;\n    } else if (name === 'pokeball-fainted') {\n      left = 80;\n      top = 4;\n      css.opacity = '0.4';\n      css.filter = 'contrast(0)';\n    } else if (name === 'pokeball-none') {\n      left = -80;\n      top = 4;\n    } else {\n      return undefined;\n    }\n    const url = `${URL(options)}/sprites/pokemonicons-pokeball-sheet.png`;\n    css.background = `transparent url(${url}) no-repeat scroll ${left}px ${top}px`;\n\n    return {style: toStyle(css), url, left, top, css};\n  }\n\n  /**\n   * Returns information required to display an icon for a particular Item.\n   *\n   * @param name - the name of the Item to retrieve icon information for\n   * @param options - options controlling the URL returned:\n   *\n   *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed\n   *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`\n   */\n  getItem(name: string, options?: {protocol?: Protocol; domain?: string}) {\n    const num = this.data.getItem(name)?.spritenum ?? 0;\n    const top = -Math.floor(num / 16) * 24;\n    const left = -(num % 16) * 24;\n    const url = `${URL(options)}/sprites/itemicons-sheet.png`;\n\n    const css: {[attr: string]: number | string} = {\n      display: 'inline-block',\n      width: '24px',\n      height: '24px',\n      imageRendering: 'pixelated',\n      background: `transparent url(${url}) no-repeat scroll ${left}px ${top}px`,\n    };\n\n    return {style: toStyle(css), url, top, left, css};\n  }\n\n  /**\n   * Returns information required to display an icon for a particular Type.\n   *\n   * @param name - the name of the Type to retrieve icon information for\n   * @param options - options controlling the URL returned:\n   *\n   *   - `protocol`: URL protocol, defaults to `'https'`, but `'http'` is also allowed\n   *   - `domain`: the domain to fetch sprites from, defaults to `'play.pokemonshowdown.com`\n   */\n  getType(name: string, options?: {protocol?: Protocol; domain?: string}) {\n    const type = name === '???'\n      ? '%3f%3f%3f'\n      : `${name.charAt(0).toUpperCase()}${(name).substr(1).toLowerCase()}`;\n    const url = `${URL(options)}/sprites/types/${type}.png`;\n    return {url, type, w: 32, h: 14};\n  }\n}\n\nfunction sanitizeName(name: any) {\n  if (!name) return '';\n  return ('' + name)\n    .replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;')\n    .slice(0, 50);\n}\n\nfunction toStyle(css: {[attr: string]: number | string}) {\n  const style = [];\n  for (const attr in css) {\n    style.push(`${attr === 'imageRendering' ? 'image-rendering' : attr}:${css[attr]}`);\n  }\n  return `${style.join(';')};`;\n}\n", "import * as DataJSON from './data.json';\nimport * as I from './interface';\n\n// These cryptic field names cut down bandwidth size - see\n// getPokemon below for what the obfuscated names represent\nexport interface PokemonData {\n  g: I.GenerationNum;\n  n: number;\n  i?: number;\n  s?: number;\n  if?: number;\n  il?: number;\n  nd?: boolean;\n  ns?: boolean;\n  m?: string[];\n  f?: I.Dimensions;\n  ff?: I.Dimensions;\n  b?: I.Dimensions;\n  bf?: I.Dimensions;\n  bw?: {\n    f?: I.Dimensions;\n    ff?: I.Dimensions;\n    b?: I.Dimensions;\n    bf?: I.Dimensions;\n  };\n}\n\nconst DATA = DataJSON as {\n  pokemon: {[spriteid: string]: PokemonData};\n  items: {[id: string]: number};\n  avatars: {[key: string]: string};\n};\n\nfunction toID(s: string) {\n  return ('' + s).toLowerCase().replace(/[^a-z0-9]+/g, '') as I.ID;\n}\n\nexport const Data = new class implements I.Data {\n  getPokemon(name: string) {\n    let id = toID(name);\n    if (id === 'toxtricitylowkeygmax') id = 'toxtricitygmax' as I.ID;\n    const data = DATA.pokemon[id];\n    if (!data) return undefined;\n    return {\n      id,\n      spriteid: data.s ? `${id.slice(0, data.s)}-${id.slice(data.s)}` : id,\n      gen: data.g,\n      num: data.n,\n      icon: data.i,\n      iconf: data.if,\n      iconl: data.il,\n      dex: data.g < 8 && !data.nd,\n      nonshiny: data.ns,\n      missing: data.m,\n      front: data.f,\n      frontf: data.ff,\n      back: data.b,\n      backf: data.bf,\n      bw: {\n        front: data.bw?.f,\n        frontf: data.bw?.ff,\n        back: data.bw?.b,\n        backf: data.bw?.bf,\n      },\n    };\n  }\n\n  getItem(name: string) {\n    const spritenum = DATA.items[toID(name)];\n    return spritenum ? {spritenum} : undefined;\n  }\n\n  getAvatar(key: string) {\n    return DATA.avatars[key];\n  }\n};\n", "import * as A from './adaptable';\n\nimport {Data} from './data';\n\nexport const Sprites = new A.Sprites(Data);\nexport const Icons = new A.Icons(Data);\n\nexport {GraphicsGen, AnimatedGraphicsGen, SecondFrameGraphicsGen, PokemonSprite} from './adaptable';\n"],
  "mappings": "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",
  "names": ["file", "Sprites", "Icons"]
}
